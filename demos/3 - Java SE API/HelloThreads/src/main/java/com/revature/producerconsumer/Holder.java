package com.revature.producerconsumer;

public class Holder {
	int contents = 0;
	private boolean isAvailable = false;
	
	/**
	 * This class will hold all of the values generated by another thread
	 * 
	 * and it will contain SYNCHORNIZED methods for getting and setting values
	 */
	
	public synchronized int getVal() {	
		// this will return the value of the holder 
		// to the Consumer
		while(isAvailable == false) {
			
			try {
				wait(); // this method forces the current thread to wait until some other thread
						// invokes notify() or notifyAll() on the same object
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		isAvailable = false;
		notifyAll();
		
		return contents;
	}
	
	public synchronized void setVal(int val) {
		
		// this method will be invoked by the
		// Producer
		while (isAvailable == true) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		contents = val;
		isAvailable = true;
		notifyAll();
	}
}
