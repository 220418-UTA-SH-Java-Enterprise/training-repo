<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.revature</groupId>
  <artifactId>HelloFrontController</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>HelloFrontController</name>
  
    <properties>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>
	</properties>

	<build>
		<!-- This renames the built war file -->
		<finalName>${project.artifactId}</finalName>

		<plugins>

			<!-- Surefire plugin to print tests during build cycle -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.12.4</version>
			</plugin>

			<!-- Jacoco Plugin for printing code coverage reports -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.6</version>
				<configuration>
	                <dataFile>${project.build.directory}/jacoco.exec</dataFile>
					<append>true</append>
	            </configuration>
				<executions>
				<execution>
					<id>default-prepare-agent</id>
					<goals>
						<goal>prepare-agent</goal>
					</goals>
				</execution>
				<execution>
					<id>default-report</id>
					<goals>
						<goal>report</goal>
					</goals>
				</execution>
				<execution>
                    <id>jacoco-site</id>
                    <phase>verify</phase>
                    <goals>
                        <goal>report</goal>
                    </goals>
                </execution>
				<execution>
					<id>default-check</id>
					<goals>
						<goal>check</goal>
					</goals>
				<configuration>
					<rules>
						<rule>
							<element>BUNDLE</element>
							<limits>
								<limit>
									<counter>COMPLEXITY</counter>
									<value>COVEREDRATIO</value>
									<minimum>0.60</minimum>
								</limit>
							</limits>
						</rule>
					</rules>
				</configuration>
				</execution>
			</executions>
		</plugin>

			<!-- maven war plugin -->
			<!-- responsible for collecting all artifact dependencies, classes and 
				resources of the web application and packaging them into our web application 
				archive (WAR) file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.3.1</version>
			</plugin>
		</plugins>

	</build>

	<dependencies>

		<!-- The javax.servlet dependency is an api that gives us classes and interfaces 
			that describe and define the contracts between a servlet class and the runtime 
			environment provided for each instance of a class by a conforming servlet 
			container. -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
		</dependency>

		<!-- This is how we can convert objects TO and FROM JSON this is called 
			object marshalling -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.8.9</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>5.4.32.Final</version>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.2.5</version>
		</dependency>


		<!-- for logging! (this is a library) -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

		<!-- Mocks are useful if you have a dependency on an external system, file 
			reading takes too long, or if the database connection is unreliable -->
		<!-- https://mvnrepository.com/artifact/org.mockito/mockito-all -->
		<dependency>
        	<groupId>org.mockito</groupId>
	       <artifactId>mockito-core</artifactId>
	       <version>4.2.0</version>
	       <scope>test</scope>
	   </dependency>

		<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt -->
		<!-- JJWT is used to create and verify JSON Web Tokens (JWTs) on the JVM -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.1</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.1</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.1</version>
		</dependency>

		<!-- lombok allows for abstraction of needed model class methods  -->
		<dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.22</version>
        </dependency>
	</dependencies>
</project>